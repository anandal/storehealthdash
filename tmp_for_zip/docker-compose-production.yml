version: '3.8'

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "80:5000"
      - "5001:5001"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PGHOST=${PGHOST}
      - PGDATABASE=${PGDATABASE}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    depends_on:
      - db
    networks:
      - sceneiq-network
    restart: always
    command: /bin/bash -c "cd /app && python -m streamlit run app.py --server.port=5000 --server.headless=true --server.address=0.0.0.0 & python basic_api.py"
    # Add healthcheck for production deployment
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_PASSWORD=${PGPASSWORD:-postgres}
      - POSTGRES_DB=${PGDATABASE:-sceneiq}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - sceneiq-network
    restart: always
    # Add healthcheck for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Add nginx for production environments
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - sceneiq-network
    restart: always

networks:
  sceneiq-network:
    driver: bridge

volumes:
  postgres_data: